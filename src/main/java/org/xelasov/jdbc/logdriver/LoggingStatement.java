package org.xelasov.jdbc.logdriver;

import java.sql.*;
import java.util.concurrent.TimeUnit;

import com.google.common.base.Stopwatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoggingStatement implements Statement {

  protected static final Logger log = LoggerFactory.getLogger("DB.LOG");
  protected final LoggingConnection conn;
  private final   Statement         stmt;

  public LoggingStatement(final LoggingConnection conn, final Statement stmt) {
    this.stmt = stmt;
    this.conn = conn;
  }

  private void log(String sql, LoggingConnection connection, Stopwatch timer, Throwable e) {
    timer.stop();
    log.error("millis=" + timer.elapsed(TimeUnit.MILLISECONDS) + " q={" + sql + "}", e);
  }

  private void log(String sql, LoggingConnection connection, Stopwatch timer) {
    timer.stop();
    log.info("millis=" + timer.elapsed(TimeUnit.MILLISECONDS) + " q={" + sql + "}");
  }

  @Override
  public void addBatch(final String sql) throws SQLException {
    stmt.addBatch(sql);
  }

  @Override
  public void cancel() throws SQLException {
    stmt.cancel();
  }

  @Override
  public void clearBatch() throws SQLException {
    stmt.clearBatch();
  }

  @Override
  public void clearWarnings() throws SQLException {
    stmt.clearWarnings();
  }

  @Override
  public void close() throws SQLException {
    stmt.close();
  }

  @Override
  public boolean execute(final String sql) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final boolean rv = stmt.execute(sql);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final boolean rv = stmt.execute(sql, autoGeneratedKeys);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final boolean rv = stmt.execute(sql, columnIndexes);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public boolean execute(final String sql, final String[] columnNames) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final boolean rv = stmt.execute(sql, columnNames);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public int[] executeBatch() throws SQLException {
    final String    sql   = "executeBatch";
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final int rv[] = stmt.executeBatch();
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public ResultSet executeQuery(final String sql) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final ResultSet rv = stmt.executeQuery(sql);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public int executeUpdate(final String sql) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final int rv = stmt.executeUpdate(sql);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final int rv = stmt.executeUpdate(sql, autoGeneratedKeys);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final int rv = stmt.executeUpdate(sql, columnIndexes);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
    final Stopwatch timer = Stopwatch.createStarted();
    try {
      final int rv = stmt.executeUpdate(sql, columnNames);
      log(sql, conn, timer);
      return rv;
    } catch (SQLException e) {
      log(sql, conn, timer, e);
      throw e;
    } catch (RuntimeException e) {
      log(sql, conn, timer, e);
      throw e;
    }
  }

  @Override
  public Connection getConnection() throws SQLException {
    return conn;
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return stmt.getFetchDirection();
  }

  @Override
  public void setFetchDirection(final int direction) throws SQLException {
    stmt.setFetchDirection(direction);
  }

  @Override
  public int getFetchSize() throws SQLException {
    return stmt.getFetchSize();
  }

  @Override
  public void setFetchSize(final int rows) throws SQLException {
    stmt.setFetchSize(rows);
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return stmt.getGeneratedKeys();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return stmt.getMaxFieldSize();
  }

  @Override
  public void setMaxFieldSize(final int max) throws SQLException {
    stmt.setMaxFieldSize(max);
  }

  @Override
  public int getMaxRows() throws SQLException {
    return stmt.getMaxRows();
  }

  @Override
  public void setMaxRows(final int max) throws SQLException {
    stmt.setMaxRows(max);
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return stmt.getMoreResults();
  }

  @Override
  public boolean getMoreResults(final int current) throws SQLException {
    return stmt.getMoreResults(current);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return stmt.getQueryTimeout();
  }

  @Override
  public void setQueryTimeout(final int seconds) throws SQLException {
    stmt.setQueryTimeout(seconds);
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return stmt.getResultSet();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return stmt.getResultSetConcurrency();
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return stmt.getResultSetHoldability();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return stmt.getResultSetType();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return stmt.getUpdateCount();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return stmt.getWarnings();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return stmt.isClosed();
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return stmt.isPoolable();
  }

  @Override
  public void setPoolable(final boolean poolable) throws SQLException {
    stmt.setPoolable(poolable);
  }

  @Override
  public boolean isWrapperFor(final Class<?> iface) throws SQLException {
    return stmt.isWrapperFor(iface);
  }

  @Override
  public void setCursorName(final String name) throws SQLException {
    stmt.setCursorName(name);
  }

  @Override
  public void setEscapeProcessing(final boolean enable) throws SQLException {
    stmt.setEscapeProcessing(enable);
  }

  @Override
  public <T> T unwrap(final Class<T> iface) throws SQLException {
    return stmt.unwrap(iface);
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    stmt.closeOnCompletion();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return stmt.isCloseOnCompletion();
  }

}
